Okay, let's break down hashing and then build up to consistent hashing.

Part 1: Hashing Basics
What is Hashing?
At its core, hashing is the process of transforming an input item (often called a key) of arbitrary size into an 
output of a fixed size, usually an integer. This transformation is performed by a hash function.

Ex: Think of it like assigning every book in a massive library a unique shelf number. 
No matter how long the book title or how thick the book (the input key), 
the shelf number (the hash value) follows a predictable format and range.

Key Components:

1. Key: The input data you want to hash (e.g., a string like "hello world", a user ID, a password, an image file).
2. Hash Function: A mathematical or computational function that takes the key and produces the hash value.
3. Hash Value (or Hash Code or Hash): The fixed-size output generated by the hash function, typically an integer.
4. Hash Table (or Hash Map): A common data structure that uses hashing to store key-value pairs. 
   The hash value is often used to calculate an index (a "bucket" or "slot") in an array where the corresponding value is stored.

How does a Hash Function Work (Simplified)?
A simple (though not very good for real-world use) hash function for strings might be: 
  sum the ASCII values of all characters and then take the result modulo N (where N is the number of available slots/buckets).

Example:
    Key: "cat"
    ASCII: c=99, a=97, t=116
    Sum: 99 + 97 + 116 = 312
    Let's say we have N=10 buckets (indices 0 to 9).
    Hash Value Calculation: 312 % 10 = 2
    So, the key "cat" would be mapped to bucket index 2.
    Real-world hash functions (like SHA-256, MD5, MurmurHash) are much more complex to ensure good properties.

Properties of a Good Hash Function:
    Deterministic: The same input key must always produce the same hash value.
    Efficient: It should be fast to compute the hash value for any given key.
    Uniform Distribution: Keys should be distributed as evenly as possible across the possible hash values (or hash table buckets). This minimizes collisions.
    Avalanche Effect (Desirable): A small change in the input key should result in a significantly different (uncorrelated) hash value.

What are Collisions?
  A collision occurs when two different keys produce the same hash value. Since the number of possible keys is often much larger than the number of possible hash values, collisions are inevitable (by the Pigeonhole Principle).

Example (using our simple function above):
    Key: "act"
    ASCII: a=97, c=99, t=116
    Sum: 97 + 99 + 116 = 312
    Hash Value Calculation: 312 % 10 = 2
    Both "cat" and "act" hash to index 2. This is a collision. Data structures like hash tables need strategies to handle collisions (e.g., chaining, open addressing).