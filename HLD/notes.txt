Vertical scaling: Buy better machines
Load balancing not required
Single point of failure
Inter process communication
Data consistent
Hardware limit
Small no. of users

Horizontal scaling: Buy more machines
Load balancing required
Resilient
Network call(RPC)
Data inconsistency
No hardware limit
Huge number of users

Load balancing: The process of balancing the load evenly on all servers

Consistent Hashing

# Network Protocols
- Define rules so that machines can communicate with each other(over network)

Application layer protocols:
1. Client-server protocol
Client: Sends Request, Receives response
Server: Receives request, Process request, Send response
Protocols: HTTP/HTTPS, FTP, SMTP, IMAP, Web socket

Unidirectional communication
HTTP - 1 connection
HTTPS - similar to HTTP, but secure, uses encryption
FTP - 2 connection, control(always on) and data(can be on or off), not secure,
SMTP - sending the email 
IMAP - Receiving/accessing the mail(mail at central server)
POP3 - same as IMAP, but mail deletes after reading

Bi-directional communication
Web socket

2. Peer to peer protocol
Bi-directional communication + any computer can communicate with any other computer
All computers are equivalent, no client-server
Fast 
Protocols: WebRTC
WebRTC uses UDP

Transport/Network Layer protocols:
1. TCP/IP
Data packets
Ordering maintain
Acknowledgment of each package
Slow

2. UDP/IP
No connection maintain
No ordering
No acknowledgement
Fast


# Microservices Design Pattern
Introduction and decomposition pattern

Types of architecture
1. Monolithic 
2. Microservices

Monolithic(legacy)


advantage:

disadvantage: 
overload IDE
scaling is very hard


Microservices
Divide whole codebase into services

advantage:
easy to manage
easy to scale


disadvantage:
Latency can increase if microservices are not designed properly
Monitoring can be difficult
Transaction management is difficult



Decomposition
Decompose by business capability
Decompose by subdomain



database
database per service
shared database

Communication
API 
Events


Integration
API Gateways


Observability


Monitoring


Decomposition pattern
Big -> small

Decompose by business functionality
Online order application
Order management
Product management
Account management
Login 
Billing
Payment

Decompose by Subdomain(DDD -> domain driven design)























Monolithic -> Microservice

1. Strangler Pattern
- Refactoring 2 microservices
- Gradually increase the load on microservice and decrease on monolithic

Data management in microservice
a) Database for each individual service: ACID properties difficult to maintain
b) Shared database: not much scalable, we can't scale according to service, we have to scale whole database, ACID properties easy to maintain

2. SAGA Pattern
Helps maintain ACID properties
Sequence of Local Transaction
Each DB listens for events and work accordingly
Types: Choreography, Orchestration
Choreography: Drawback -> Cycle dependency
Orchestrator: central component

3. CQRS: differentiate Command and Query(Read)
Helps in JOINS 
Command     Query     Request     Segregation 
 (CUD)     (SELECT)


Database per service
No service can query the DB of another service


Scale from 0 to 1 Million users!


1. Single Server

2. Application & DB server separation

3. Load balancer + Multiple app servers

4. Database replication(master-slave architecture)
write -> master
read -> slave

5. Cache(cache hit, cache miss)

6. CDN(Content Delivery Network)
CDN does caching, but all those who does caching are not CDN. ex: Redis
Does caching of static data

7. Data centre

8. Messaging queue: Async nature

9. DB scaling
a) Vertical
b) Horizontal