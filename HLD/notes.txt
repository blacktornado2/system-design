------------------------------------------ System Design ------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------

REF: Overview: https://www.hellointerview.com/learn/system-design/in-a-hurry/introduction
REF: Basic concepts: https://systemdesignschool.io/primer#introduction
REF: Deep dive: https://github.com/donnemartin/system-design-primer?tab=readme-ov-file


 - System design is all about finding the right tradeoffs
 - Put all the moving parts of a system together: DB, API, Caching, Load Balancing, Servers, Queue
 - Balance competing priorities: speed vs. cost, consistency vs. availability, simplicity vs. flexibility
 - Handle challenges like scalability, fault tolerance and performance
 - Skills required: Problem-solving, Big picture thinking, trade-off analysis, communication, adaptability

---------------------------------------------------------------------------------------------------------------------

How are System Design Interviews Evaluated ?
1. Problem Solving: Identify & prioritise the core challenges
2. Solution Design: Create scalable architectures with balanced trade-offs according to requirements
3. Technical Excellence: Demonstrate deep knowledge and expertise
4. Communication: Clearly explain complex concepts to stakeholders

---------------------------------------------------------------------------------------------------------------------------------------------------------------

System Design Template:
 1. Clarify Requirements(Functional/Non-functional)
 2. Core entities(tables in the DB e.g. User, Friends, Settings)
 3. API Design
 4. Data flow
 5. High Level Design
 6. Deep Dive(follow up questions if time permits)

---------------------------------------------------------------------------------------------------------------------------------------------------------------

The Fundamentals:
1. Storage(relational, document based, key-value, ACID, BASE, access patterns, consistency requirements)
2. Scalability(Scale compute, scale storage: sharding, consistent hashing)
3. Networking
4. Latency, Throughput & Performance(RAM, SSD, HDD, same/cross region network call)
5. Fault tolerance & Redundancy
6. CAP theorem


API design: https://www.hellointerview.com/learn/system-design/core-concepts/api-design

---------------------------------------------------------------------------------------------------------------------------------------------------------------


Networking:
 - Application Layer:
  - HTTP/HTTPS protocols
  - REST vs GraphQL vs gRPC/ API design
  - RESTful Semantics
  - DNS resolution
  - Websockets vs SSE
 - Transport Layer: 
  - TCP
  - UDP
  - Request response cycle
 - Network Layer:
  - Load balancing
  - Firewalls, ACLs


Problems:
HLD:

 - Vertical vs Horizontal Scaling: DONE
 - Client-Server Architecture: DONE
 - Load Balancer: DONE
 - Caching:
 - Database: DONE
 - SQL/NoSQL: DONE
 - Creating Diagrams: DONE
 - Indexing in Database:  
 - Forward and Reverse Proxy: DONE
 - Message Queue and CDN:  
 - CAP Theorem:  
 - API Gateway:  
 - Network Protocols:  
 - Microservices design patterns:  
 - SAGA pattern:  
 - Consistent Hashing: DONE
 - Strangler Pattern:  
 - CQRS pattern:  
 - Scale from 0 to 1 million: DONE
 - Back of the envelope estimation(Capacity Estimation): DONE
 - Partitioning and Sharding: DONE
 - JWT: DONE

 - Design URL shortener: DONE
 - Design Dropbox | iCloud | Gdrive | Onedrive:
 - Design Ticketmaster: 
 - Design a newsfeed | FB, IG, Reddit: DONE
 - Design Whatsapp:
 - Design LeetCode:
 - Design Uber:
 - Design webcrawler:
 - Design Ad Click Aggregator:
 - Design Post Search
 - Design a rate limiter: DONE
 - Design a unique ID Generator: DONE
 - Design a notification system | SMS, Email and Push Notification: DONE
 - Design Apache Kafka:
 - Design Message Queue:


---------------------------------------------------------------------------------------------------------------------------------------------------------------

Vertical Scaling vs Horizontal Scaling

Vertical Scaling: Upgrading current machine to make it more powerful
 - Simple to implement, Easier to manage
 - Load balancing not required
 - Single point of failure
 - Inter process communication: very fast
 - Data consistent
 - Hardware limit
 - Small no. of users

Horizontal Scaling: Buy more machines
 - More complex management
 - Load balancing required
 - Resilient
 - Network call(RPC): slow as compared to inter process communication
 - Data inconsistency
 - No hardware limit
 - Huge number of users
 - Decreases latency as client can connect to their nearest server

Load balancing: The process of balancing the load evenly on all servers

---------------------------------------------------------------------------------------------------------------------------------------------------------------

Client - Server Model
 - The Client - Server Model is a distributed application structure that partitions tasks or workloads between providers of a resource or service, called servers, and service requesters, called clients. 
 - Typically, clients and servers communicate over a network, making it possible for users to access services and resources remotely.

Interaction Process
The interaction between a client and server can be broken down into the following steps:
 1. Request: The client sends a request to the server for some resource or service.
 2. Processing: The server processes the request. This may involve querying a database, performing computations, or interacting with other services.
 3. Response: The server sends the requested resource or the result of the computation back to the client.

Advantages of the Client-Server Model
 - Centralization: Servers centralize the business logic, making it easier to maintain and update the system.
 - Scalability: Clients can be easily added or removed without significantly affecting the server.
 - Security: Servers can enforce security policies and control access to resources.

---------------------------------------------------------------------------------------------------------------------------------------------------------------



# Network Protocols
- Define rules so that machines can communicate with each other(over network)

Application layer protocols:
1. Client-server protocol
Client: Sends Request, Receives response
Server: Receives request, Process request, Send response
Protocols: HTTP/HTTPS, FTP, SMTP, IMAP, Web socket

Unidirectional communication
HTTP - 1 connection
HTTPS - similar to HTTP, but secure, uses encryption
FTP - 2 connection, control(always on) and data(can be on or off), not secure,
SMTP - sending the email 
IMAP - Receiving/accessing the mail(mail at central server)
POP3 - same as IMAP, but mail deletes after reading

Bi-directional communication
Web socket

2. Peer to peer protocol
Bi-directional communication + any computer can communicate with any other computer
All computers are equivalent, no client-server
Fast 
Protocols: WebRTC
WebRTC uses UDP

Transport/Network Layer protocols:
1. TCP/IP
Data packets
Ordering maintain
Acknowledgment of each package
Slow

2. UDP/IP
No connection maintain
No ordering
No acknowledgement
Fast

---------------------------------------------------------------------------------------------------------------------------------------------------------------


# Microservices Design Pattern: Introduction and decomposition pattern

Types of architecture
1. Monolithic 
2. Microservices

Monolithic(legacy)
    A monolithic architecture structures an application as a single, indivisible unit. 
    All components (user interface, business logic, data access layer, background jobs, etc.) are built and deployed together as one large codebase and executable/deployable artifact 
    (e.g., a single WAR file for Java, a single executable)

Advantage:
    Simplicity
    Atomic transaction

Disadvantage: 
    Tightly coupled
    Overload IDE
    Scaling is very hard
    Slow development(at scale)
    Single point of failure


Microservices
    A microservices architecture structures an application as a collection of small, independent, and loosely coupled services. 
    Each service focuses on a specific business 1  capability, runs in its own process, and communicates with other services, typically over a network using lightweight protocols like HTTP/REST APIs or asynchronous messaging. 
    Each service can be developed, deployed, and scaled independently

Advantage:
    Easy to manage
    Easy to scale
    Independent deployment
    Technology diversity


Disadvantage:
    Latency can increase if microservices are not designed properly
    Operational Complexity
    Monitoring can be difficult
    Transaction management is difficult

Which one to use?
 Use Monolithic when: Starting Small / MVP: For new projects, especially startups or Minimum Viable Products (MVPs), where the primary goal is speed to market and validating an idea. The initial simplicity is a major advantage.
 Use Microservices when: Large, Complex Applications: For applications with multiple, complex business domains that can be logically separated. Highly scalable applications

Microservices Design Phases:

Decomposition
    Decompose by business capability
    Decompose by subdomain

Decomposition pattern
    Big -> small

Decompose by business functionality
    Online order application
    Order management
    Product management
    Account management
    Login 
    Billing
    Payment

Decompose by Subdomain(DDD -> domain driven design)

Database
    Database per service
    Shared database

Communication
    API 
    Events

Integration
    API Gateways

Observability

Monitoring

---------------------------------------------------------------------------------------------------------------------------------------------------------------


Monolithic -> Microservice

1. Strangler Pattern
- Refactoring 2 microservices
- Gradually increase the load on microservice and decrease on monolithic

Data management in microservice
a) Database for each individual service: ACID properties difficult to maintain
b) Shared database: not much scalable, we can't scale according to service, we have to scale whole database, ACID properties easy to maintain

2. SAGA Pattern
Helps maintain ACID properties
Sequence of Local Transaction
Each DB listens for events and work accordingly
Types: Choreography, Orchestration
Choreography: Drawback -> Cycle dependency
Orchestrator: central component

3. CQRS: differentiate Command and Query(Read)
Helps in JOINS 
Command     Query     Request     Segregation 
 (CUD)     (SELECT)


Database per service
No service can query the DB of another service




---------------------------------------------------------------------------------------------------------------------------------------------------------------


Scale from 0 to 1 Million users!

1. Start with a single Server

2. Application & DB server separation

3. Load balancer + Multiple app servers

4. Database replication(master-slave architecture)
write -> master
read -> slave

5. Cache(cache hit, cache miss)

6. CDN(Content Delivery Network)
CDN does caching, but all those who does caching are not CDN. ex: Redis
Does caching of static data

7. Data centre

8. Messaging queue: Async nature

9. DB scaling
a) Vertical
b) Horizontal