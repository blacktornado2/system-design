Goal: Build a service that takes a long URL and gives back a much shorter, unique URL. 
When someone visits the short URL, they should be redirected to the original long URL.

Core Concepts:

Shortening: Generating a short alias for a long URL.
Storage: Saving the mapping between the short alias and the long URL.
Redirection: Looking up the long URL when the short alias is accessed and sending the user there.

------------------------------------------------------------------------------------------------------------------------------------

1: Understanding the Basic Requirements & Use Cases

-> Functional Requirements:
- Users can submit a long URL and receive a short URL.
- Users accessing a short URL are redirected to the original long URL.
- Short URLs should be significantly shorter than the original URLs.
- Short URLs should be unique.

-> Non-Functional Requirements:
- High Availability: The service should be available most of the time. Redirects must work reliably.
- Low Latency: Redirects should happen very quickly. Shortening can take slightly longer but should still be reasonably fast.
- Scalability: The service should handle a large number of URLs and redirect requests (potentially billions of URLs and millions of requests per second).
- Unpredictability (Optional but Recommended): Short URLs shouldn't be easily guessable sequentially (e.g., short.ly/1, short.ly/2 is bad).

------------------------------------------------------------------------------------------------------------------------------------

Step 2: Designing the API Endpoints

We need ways for users (or other applications) to interact with our service. A simple REST API is suitable:

1. Shorten URL:
- Endpoint: POST /api/v1/shorten
- Request Body: { "long_url": "https://www.very-long-url.com/with/lots/of/parameters?id=12345" }
- Response (Success): 201 Created
- Body: { "short_url": "http://myshort.ly/aBcDeF" }
- Response (Error): 400 Bad Request (e.g., invalid URL format)


2. Redirect URL:
- Endpoint: GET /{short_alias} (e.g., GET /aBcDeF)
- Request: A user clicks or navigates to http://myshort.ly/aBcDeF
- Response (Success): 301 Moved Permanently or 302 Found (HTTP Redirect)
- Header: Location: https://www.very-long-url.com/with/lots/of/parameters?id=12345
- Response (Error): 404 Not Found (if short_alias doesn't exist)

Note on 301 vs 302:

- 301 Moved Permanently: Tells browsers/search engines the move is permanent. Good for SEO if the destination never changes. Can be cached aggressively by browsers.
- 302 Found (or 307 Temporary Redirect): Tells browsers the move is temporary. Less browser caching.
  Allows changing the target URL later and is often preferred for URL shorteners as it enables analytics (tracking clicks before redirecting). 
  Let's lean towards 302 for flexibility.

------------------------------------------------------------------------------------------------------------------------------------

Step 3: Data Modeling - How to Store the Mappings?

We need to store the relationship between the short_alias and the long_url. A simple structure would be:

------------------------------------------------------------------------------------------------------------------------------------
Column Name            	            Data Type	            Description	                                 Constraints               |
------------------------------------------------------------------------------------------------------------------------------------
short_alias	                         VARCHAR	         The generated short code (e.g., aBcDeF)	Primary Key, Unique              |
long_url	                   TEXT or VARCHAR(2048+)	    The original long URL	                          Not Null                 |
creation_date	                     TIMESTAMP	         When the short link was created	                                         |
(Optional)expiration_date	         TIMESTAMP	         When the link should expire	                                             |
(Optional) user_id	                VARCHAR/INT	        If supporting user accounts                                              |
------------------------------------------------------------------------------------------------------------------------------------

Database Choice Considerations:

-> Reads vs. Writes: We will have significantly more reads (redirects) than writes (creating new short URLs).
-> Scale: Needs to handle potentially billions of entries.
-> Lookup Speed: Lookups by short_alias must be extremely fast.

-> Relational Database (e.g., PostgreSQL, MySQL):
  Pros: Mature, ACID compliant, familiar SQL.
  Cons: Scaling can become complex (sharding might be needed). Auto-incrementing IDs can be a bottleneck in distributed systems.

-> NoSQL Key-Value Store (e.g., Redis, DynamoDB, Cassandra):
  Pros: Excellent scalability, extremely fast key-based lookups (perfect for short_alias -> long_url), often handle massive scale better.
  Cons: Less flexible querying (though not really needed here), eventual consistency models might need consideration (though strong consistency is often available and preferred here).

Recommendation: For a large-scale service, a NoSQL key-value store is often preferred due to its scalability and fast read performance. short_alias becomes the key, and the value could be the long_url or an object containing the long_url and other metadata.

------------------------------------------------------------------------------------------------------------------------------------

Step 4: Generating the short_alias - The Core Algorithm

How short our URL should be?
As short as we can

Traffic:
10 Million URL/per day -> 3.65 billion URL per year

Let's suppose we want this service for 100 Years
100 Years -> 365 billion URLS we have to generate

What characters can we use?
0-9 / a-z / A-Z
10    26    26

62 possible characters

How many combinations are possible
1 characters -> 62 possibilites
2 characters -> 62^2 possibilites
3 characters -> 62^3 possibilites
4 characters -> 62^4 possibilites
5 characters -> 62^5 possibilites
6 characters -> 62^6 possibilites = 56 billion
7 characters -> 62^7 possibilites = 3.5 trillion(enough for our service for 100 years)

* So we need 7 characters

This is a critical part. The alias must be unique and short.

-> Approach 1: Hashing (Not Recommended for Uniqueness Guarantee)

Take the long URL, hash it (e.g., MD5, SHA1).
Take the first 6-8 characters of the hash.
Problem: Collisions! Different long URLs can produce the same hash prefix. You'd need a complex collision resolution strategy (e.g., try the next 6 chars, append a number). This gets messy and might not guarantee shortness.

Hash function
    a) MD5 => 128 bit(16 bytes) = (32 characters) | 1 character = 4 bits = 0.5 bytes 
    b) SHA-1 => 160 bits = 40 characters

So we can't use Hash function as we have to trim them down(the no. of characters generated), which will lead to lot of collision





-> Approach 2: Base Conversion (Recommended)
1. Assign a Unique ID: Every time a new long URL is submitted (that isn't already in the system), assign it a unique, incrementing integer ID (e.g., 1, 2, 3, ..., 1,000,000, ...). This ID is internal.
2. Convert the ID: Convert this integer ID into a different base system. Instead of base-10 (digits 0-9), use base-62 ([a-z], [A-Z], [0-9]).
   Why base-62? It uses URL-safe characters and gives shorter strings than base-10 for large numbers. (Base-64 includes '+' and '/', which need URL encoding).
   Example mapping: 0='a', 1='b', ..., 25='z', 26='A', ..., 51='Z', 52='0', ..., 61='9' (or any consistent mapping).
3. The short_alias: The resulting base-62 string is our short_alias.
Example (using 0-9, a-z, A-Z):

    ID = 0 -> "0"
    ID = 10 -> "a"
    ID = 61 -> "Z"
    ID = 62 -> "10" (1 * 62^1 + 0 * 62^0)
    ID = 1000 -> "g8" (16 * 62^1 + 8 * 62^0)
    ID = 1,000,000 -> "4C92" (462^3 + 1262^2 + 962^1 + 262^0) -> Using a slightly different mapping for simplicity here, point is it grows slowly.

Benefits:
- Guarantees uniqueness if the initial ID is unique.
- Resulting alias length grows slowly (log 62)
- Billions of IDs still result in relatively short aliases (e.g., 62^6 is ~56.8 billion, 62^7 is ~3.5 trillion).
- Aliases are somewhat unpredictable if IDs aren't strictly sequential (more on this in scaling).







Base 62 hashing

i) id generator
ii) length could be different
