1. TypeScript & OOP Fundamentals
2. KISS, YAGNI, SOC & DRY Principles
3. SOLID Principles
4. Design Patterns
5. Some good problems


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------


How to write good code:
1. Readable
2. Extensibility
3. Correctness


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# SOLID principles

S - Single Responsibility Principle
O - Open/Closed Principle
L - Liskov Substitution
I - INtergace Segment
D - Dependency Inversion

Advantages of SOLID principles:
- Avoid Duplicate code
- Easy to maintain
- Easy to understand
- Flexible software
- Reduce Complexity


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------




Single Responsibility Principle
A class should have only 1 reason to change

Marker entity:

class Marker {
    String name;
    String color;
    int year;
    int price;

    public Marker(String name, String color, int year, int price) {
        this.name = name;
        this.color = color;
        this.year = year;
        this.price = price; 
    }
}

Invoice entity:

class Invoice {

    private Marker marker;
    private int quantity;

    public Invoice(Marker marker, int quantity) {
        this.marker = marker;
        this.quantity = quantity;
    }

    public int calculateTotal() {
        int price = ((marker.price) * this.quantity);
        return price;
    }

    public void printInvoice() {
        // print the Invoice
    }

    public void saveToDB() {
        // Save the data into DB
    }
}

Open/Closed Principle
Open for extension but Closed for modification

Design pattern: principle for the OOP

Strategy design pattern:


Problems:
1. Design notify-me button functionality
2. Design Pizza billing system
3. Design Parking lot
4. Design Snake and Ladder game
5. Design Elevator system
6. Design Logging system
7. Design Tic-tac-toe game
8. Design Book my Show and concurrency handling
9. Design Vending machine
10. Design ATM